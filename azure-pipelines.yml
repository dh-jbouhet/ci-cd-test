# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: DownloadGitHubRelease@0
  inputs:
    connection: 'GitHub connection'
    userRepository: 'dh-jbouhet/ci-cd-test'
    defaultVersionType: 'latest'
    downloadPath: '$(System.ArtifactsDirectory)'
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.ArtifactsDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/static-$(Build.BuildId).zip'
    replaceExistingArchive: true
- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'GitHub connection'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'release-$(Build.BuildNumber)'
    assets: '$(Build.ArtifactStagingDirectory)/static-$(Build.BuildId).zip'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo $(System.ArtifactsDirectory)
       ls -l $(System.ArtifactsDirectory)
      
      echo $(System.ArtifactStagingDirectory)
       ls -l $(System.ArtifactStagingDirectory)
      
      echo $(Build.SourcesDirectory)
       ls -l $(Build.SourcesDirectory)
      
       echo  End
    workingDirectory: '$(Build.ArtifactStagingDirectory)'

# - task: DotNetCoreCLI@2
#   displayName: Build
#   inputs:
#     command: build
#     projects: '**/*.csproj'
#     arguments: '--configuration Release' # Update this to match your need
# - task: DotNetCoreCLI@2
#   inputs:
#     command: test
#     projects: '**/*Tests/*.csproj'
#     arguments: '--configuration $(buildConfiguration)'
# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: false
#     modifyOutputPath: false

# - task: GitHubRelease@1
#   inputs:
#     gitHubConnection: 'GitHub connection'
#     repositoryName: '$(Build.Repository.Name)'
#     action: 'create'
#     target: '$(Build.SourceVersion)'
#     tagSource: 'userSpecifiedTag'
#     tag: '$(Build.BuildNumber)'
#     assets: '$(Build.ArtifactStagingDirectory)/*.dll'
#     changeLogCompareToRelease: 'lastFullRelease'
#     changeLogType: 'commitBased'


    
# - task: OctopusCreateRelease@4
#   inputs:
#     OctoConnectedServiceName: 'Octopus HelloWorldApp'
#     Space: 'Spaces-1'
#     ProjectName: 'Projects-1'
# - task: OctopusDeployRelease@4
#   inputs:
#     OctoConnectedServiceName: 'Octopus HelloWorldApp'
#     Space: 'Spaces-1'
#     Project: 'Projects-1'
#     ReleaseNumber: 'latest'
#     Environments: 'Environments-1'
# # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
# - task: PublishBuildArtifacts@1
#   inputs:
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'HelloWorldAppArtifact'